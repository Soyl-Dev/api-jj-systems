import repositoryNotificacao from '../repositories/repository.notificacao.js';  // Caminho correto para a pasta 'repositories'
            
// Fun√ß√£o para listar todas as notifica√ß√µes
async function Listar() {
    try {
        const notificacoes = await repositoryNotificacao.Listar(); // Recupera as notifica√ß√µes do reposit√≥rio
        // Verifica se o campo IMAGENS j√° √© v√°lido e processado no reposit√≥rio
        notificacoes.forEach(notificacao => {
            if (notificacao.IMAGENS) {
                try {
                    // Se as imagens j√° v√™m como uma string contendo URLs completas, podemos apenas garantir que o formato est√° correto.
                    // Aqui n√£o estamos mais tentando fazer JSON.parse ou converter para URLs, j√° que isso deve ter sido feito no reposit√≥rio
                    if (typeof notificacao.IMAGENS === 'string') {
                        // Caso as imagens venham como uma string separada por v√≠rgulas, podemos transform√°-las em um array
                        notificacao.IMAGENS = notificacao.IMAGENS.split(','); 
                    }
                } catch (error) {
                    console.error(`Erro ao processar imagens na notifica√ß√£o ${notificacao.CD_NOTIFICACAO}:`, error);
                    notificacao.IMAGENS = null; // Se ocorrer erro no processamento das imagens, define como null
                }
            } else {
                notificacao.IMAGENS = null; // Caso n√£o haja imagens, define como null
            }
        });
        return notificacoes; // Retorna as notifica√ß√µes com as imagens j√° processadas corretamente
    } catch (error) {
        console.error("Erro ao listar notifica√ß√µes:", error);
        throw new Error('Erro ao listar notifica√ß√µes: ' + error.message);
    }
}     
// Fun√ß√£o para buscar uma notifica√ß√£o espec√≠fica pelo ID
async function BuscarPorId(cd_notificacao) {
    try {
        // Busca a notifica√ß√£o no reposit√≥rio
        const notificacao = await repositoryNotificacao.BuscarPorId(cd_notificacao);
        // Verifica se a notifica√ß√£o foi encontrada
        if (notificacao) {
            // Verifica se a notifica√ß√£o possui o campo IMAGENS
            if (notificacao.IMAGENS) {
                try {
                    // Tenta parsear o campo IMAGENS, assumindo que seja uma string JSON
                    const imagensArray = JSON.parse(notificacao.IMAGENS);
                    // Se for um array, define o campo IMAGENS como o array de URLs
                    if (Array.isArray(imagensArray)) {
                        notificacao.IMAGENS = imagensArray;
                    } else {
                        notificacao.IMAGENS = null;
                    }
                } catch (error) {
                    console.error(`Erro ao processar imagem na notifica√ß√£o ${cd_notificacao}:`, error);
                    // Caso o JSON seja inv√°lido, define IMAGENS como null
                    notificacao.IMAGENS = null;
                }
            } else {
                // Se n√£o houver imagens, define como null
                notificacao.IMAGENS = null;
            }
        }
        return notificacao;
    } catch (error) {
        console.error("Erro ao buscar notifica√ß√£o:", error);
        throw new Error('Erro ao buscar notifica√ß√£o: ' + error.message);
    }
}
// Fun√ß√£o para inserir uma nova notifica√ß√£o
async function Inserir(
    dt_notificacao,
    cd_setor_notificador,
    cd_setor_notificado,
    ds_ocorrido,
    ds_dano,
    ds_ocorrencia,
    anonimo,
    ds_notificacao,
    ds_acao,
    imagens,
    cd_usuario,
    cd_prontuario = null,  // Agora pode ser opcional
    nm_paciente = null,
    idade_paciente = null,
    ds_procedimento = null
) {
    try {
        // üîπ Valida√ß√£o de campos obrigat√≥rios
        if (!dt_notificacao || !cd_setor_notificador || !cd_setor_notificado || !ds_ocorrido || !ds_ocorrencia || !ds_notificacao || !ds_acao) {
            throw new Error("Campos obrigat√≥rios n√£o informados.");
        }        
        if (!cd_usuario) {
            throw new Error("Usu√°rio n√£o informado.");
        }
        // üîπ Certifica que "imagens" seja uma string com nomes separados por v√≠rgulas
        const imagensTexto = Array.isArray(imagens) ? imagens.join(',') : imagens || null;
        // üîπ Envia os dados para o repository
        const resultado = await repositoryNotificacao.Inserir(
            dt_notificacao,
            cd_setor_notificador,
            cd_setor_notificado,
            ds_ocorrido,
            ds_dano,
            ds_ocorrencia,
            anonimo,
            ds_notificacao,
            ds_acao,
            imagensTexto,
            cd_usuario,
            cd_prontuario,  // Pode ser NULL se n√£o informado
            nm_paciente,
            idade_paciente,
            ds_procedimento
        );
        return resultado;
    } catch (error) {
        console.error("Erro ao inserir notifica√ß√£o:", error);
        throw new Error("Erro ao inserir notifica√ß√£o: " + error.message);
    }
}
// Fun√ß√£o para editar uma notifica√ß√£o existente
async function Editar(cd_notificacao, dt_notificacao, cd_setor_notificador, cd_setor_notificado, ds_ocorrido, ds_dano, ds_ocorrencia, anonimo, ds_notificacao, ds_acao, imagens, cd_usuario) {
    try {
        // üîπ Certifica que "imagens" seja uma string com nomes separados por v√≠rgulas, similar ao m√©todo Inserir
        let imagensTexto = null;
        if (Array.isArray(imagens)) {
            imagensTexto = imagens.join(',');  // Caso as imagens venham como um array
        } else if (typeof imagens === 'string') {
            imagensTexto = imagens;  // Se j√° for uma string, mantemos a mesma
        }
        // Chama o repository para editar os dados da notifica√ß√£o no banco
        const resultado = await repositoryNotificacao.Editar(
            cd_notificacao,
            dt_notificacao,
            cd_setor_notificador,
            cd_setor_notificado,
            ds_ocorrido,
            ds_dano,
            ds_ocorrencia,
            anonimo,
            ds_notificacao,
            ds_acao,
            imagensTexto, // Passando as imagens como string separada por v√≠rgulas
            cd_usuario
        );
        return resultado;
    } catch (error) {
        console.error("Erro no servi√ßo ao editar notifica√ß√£o:", error);
        throw new Error('Erro ao editar notifica√ß√£o: ' + error.message);
    }
}
// Fun√ß√£o para excluir uma notifica√ß√£o
async function Excluir(cd_notificacao) {
    try {
        // Chama o repository para excluir a notifica√ß√£o do banco de dados
        const resultado = await repositoryNotificacao.Excluir(cd_notificacao);
        return resultado;
    } catch (error) {
        console.error("Erro no servi√ßo ao excluir notifica√ß√£o:", error);
        throw new Error('Erro ao excluir notifica√ß√£o: ' + error.message);
    }
}

export default { Listar, Inserir, Editar, Excluir, BuscarPorId };